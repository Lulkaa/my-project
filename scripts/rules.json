[
  {
    "id": "V01",
    "name": "Broken Access Control: listar usuarios",
    "regex": "User\\.find\\(",
    "description": "Acceso a todos los usuarios sin validar si req.user.role === 'ADMIN'"
  },
  {
    "id": "V02",
    "name": "Broken Access Control: modificar usuario",
    "regex": "User\\.findOneAndUpdate\\([^,]*,\\s*[^,]*\\)",
    "description": "Modificaci\u00f3n de usuario sin validar si el username coincide con el usuario autenticado"
  },
  {
    "id": "V03",
    "name": "Privilege Escalation",
    "regex": "req\\.body\\.role",
    "description": "Permitir cambiar rol sin verificar que el usuario sea ADMIN"
  },
  {
    "id": "V04",
    "name": "SSRF sin validaci\u00f3n de dominio",
    "regex": "axios\\.get\\([^,]*,\\s*\\{[^}]*responseType:\\s*['\"]arraybuffer['\"]",
    "description": "Descarga de contenido desde URL arbitraria sin validaci\u00f3n de dominio ni tipo"
  },
  {
    "id": "V05",
    "name": "Remote Code Execution (RCE)",
    "regex": "exec\\([^)]*\\)",
    "description": "Ejecuci\u00f3n de comandos con child_process.exec sin restricciones"
  },
  {
    "id": "V06",
    "name": "Broken Access Control: crear paquetes",
    "regex": "Package\\.save\\(\\)",
    "description": "Creaci\u00f3n de paquetes sin verificar que el rol sea CUSTOMER"
  },
  {
    "id": "V07",
    "name": "CORS Misconfiguration",
    "regex": "app\\.use\\(cors\\(\\)\\)",
    "description": "CORS permite cualquier origen (Access-Control-Allow-Origin: *)"
  },
  {
    "id": "V08",
    "name": "JWT con expiraci\u00f3n larga",
    "regex": "expiresIn:\\s*['\\\"]7d['\\\"]",
    "description": "JWT con expiraci\u00f3n muy larga que puede ser abusada por un atacante"
  },
  {
    "id": "V09",
    "name": "JWT con clave hardcodeada",
    "regex": "jwt\\.sign\\([^,]+,\\s*SECRET",
    "description": "El JWT se firma con una clave hardcodeada en lugar de usar process.env.JWT_SECRET"
  }
]