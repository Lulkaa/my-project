# üß≠ Workflow name ‚Äî this is what you‚Äôll see under the "Actions" tab on GitHub
name: Snyk Open Source & Code (manual)

# üöÄ Trigger ‚Äî this workflow runs manually via the "Run workflow" button in GitHub
on:
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

# üîê Permissions granted to this workflow
permissions:
  contents: read              # allows reading repository contents
  security-events: write      # allows uploading SARIF results to GitHub Security (Code Scanning)
  pull-requests: write
  
jobs:
  # üß± The main job for scanning with Snyk
  snyk-scan:
    runs-on: ubuntu-latest    # runs the workflow on a Linux (Ubuntu) runner

    steps:
      # 1Ô∏è‚É£ Checkout the repository code into the workflow environment
      - name: Checkout
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Node.js environment (version 20) and cache npm dependencies for faster builds
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Node.js version to use
          cache: 'npm'        # enables npm caching between runs

      # 3Ô∏è‚É£ Install all project dependencies from package-lock.json (clean install)
      - name: Install dependencies
        run: npm ci

      # ---------- Install & authenticate Snyk ----------
      # 4Ô∏è‚É£ Install the Snyk CLI globally
      - name: Install Snyk CLI
        run: npm install -g snyk

      # 5Ô∏è‚É£ Authenticate with Snyk using your API token stored in GitHub Secrets
      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}   # stored in GitHub repo Settings ‚Üí Secrets
        run: snyk auth "$SNYK_TOKEN"

      # ---------- Snyk Open Source (Dependency scan) ----------
      # 6Ô∏è‚É£ Scan all dependency files (package.json, requirements.txt, etc.)
      - name: Run Snyk Open Source test (Console results)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test   --sarif-file-output=snyk-os.sarif  --json-file-output=snyk-os.json | tee snyk-os.txt || true
        
        # --sarif-file-output ‚Üí export results to snyk-os.sarif
        # || true             ‚Üí ensures the workflow doesn't fail even if vulnerabilities are found

      # 7Ô∏è‚É£ Upload Snyk Open Source SARIF results to GitHub Security tab
      - name: Upload Snyk Open Source SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-os.sarif                    # path to SARIF file
          category: snyk-open-source                   # label category for this scan
     
      #Output to .json file 
      - name: Results in .json
        run: cat snyk-os.json
      #Output to .txt
      - name: Results in .txt
        run: cat snyk-os.txt


      - name: Publish Open Source artifacts (txt/json/sarif)
        uses: actions/upload-artifact@v4
        with:
          name: snyk-open-source-reports
          path: |
            snyk-os.txt
            snyk-os.json
        

            
      # ---------- Snyk Code (Static code analysis) ----------
      # 8Ô∏è‚É£ Run Snyk Code analysis (SAST) ‚Äî scans your actual source code
      - name: Run Snyk Code test ‚Üí SARIF
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk code test --sarif-file-output=snyk-code.sarif --json-file-output=snyk-code.json | tee snyk-code.txt || true
        # --sarif-file-output ‚Üí export Snyk Code findings to snyk-code.sarif
        # || true             ‚Üí keeps workflow green even if issues are found
        # ‚ö†Ô∏è Works only if "Snyk Code" is enabled for your Snyk organization

      # 9Ô∏è‚É£ Upload Snyk Code SARIF report to GitHub Security
      - name: Upload Snyk Code SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif                   # path to SARIF file
          category: snyk-code                           # label category for Snyk Code scan
      
      
       #Output to .json file 
      - name: Results in .json
        run: cat snyk-code.json
      #Output to .txt
      - name: Results in .txt
        run: cat snyk-code.txt


      - name: Publish Code artifacts (txt/json/sarif)
        uses: actions/upload-artifact@v4
        with:
          name: snyk-code-reports
          path: |
            snyk-code.txt
            snyk-code.json
          

         # ---------- Comment to PR ----------
      - name: Comment to PR with artifact link
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;

            const body = `
            üìé [Download Snyk TXT & JSON report here](${runUrl})  
            (Artifacts are available at the bottom of that page.)
             `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
