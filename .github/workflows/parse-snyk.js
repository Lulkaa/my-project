  const fs = require('fs');

          const path = 'snyk-os.json';
          let raw = fs.readFileSync(path, 'utf8');

          let parsed = JSON.parse(raw);

          // Snyk JSON might be a single object or an array (multi-project)
          const items = Array.isArray(parsed) ? parsed : [parsed];

          // Collect vulnerabilities from all items
          const allVulns = [];
          for (const it of items) {
            const list = (it && Array.isArray(it.vulnerabilities)) ? it.vulnerabilities : [];
            allVulns.push(...list);
          }

          const wanted = new Set(['critical','high','medium']);
          const vulns = allVulns.filter(v => wanted.has(String(v.severityWithCritical || v.severity || '').toLowerCase()));

          const hasIssues = vulns.length > 0;

          const mdRow = (v) => {
            const sev = String(v.severityWithCritical || v.severity || '').toUpperCase();
            const pkg = v.packageName || v.moduleName || v.name || 'unknown';
            const ver = v.version ? `@${v.version}` : '';
            const id  = v.id || '';
            const title = v.title || '';
            const cves = v?.identifiers?.CVE?.length ? v.identifiers.CVE.join(', ') : '—';
            const fix = Array.isArray(v.fixedIn) && v.fixedIn.length ? v.fixedIn.join(', ') : 'no fix listed';
            let ref = '';
            if (Array.isArray(v.references) && v.references[0]?.url) {
              ref = ` [[ref]](${v.references[0].url})`;
            }
            return `- **${sev}** \`${pkg}${ver}\` — ${title} (${id})  \n  CVE(s): ${cves} • Fix: ${fix}${ref}`;
          };

          const header = hasIssues
            ? `### ❌ Snyk found ${vulns.length} medium/high/critical vulnerabilities`
            : `### ✅ Snyk: no medium/high/critical vulnerabilities found`;

          // If multiple project blocks, show their names on top
          const projectsLine = items
            .map(it => it?.projectName)
            .filter(Boolean)
            .filter((v, i, a) => a.indexOf(v) === i) // unique
            .join(', ') || '—';

          const body = [
            header,
            '',
            `**Project(s)**: ${projectsLine}`,
            hasIssues ? '\n**Details:**\n' : '',
            hasIssues ? vulns.map(mdRow).join('\n') : '',
            '',
            '> Generated by Snyk PR Gate'
          ].join('\n');

          fs.writeFileSync('comment.md', body);

          // Expose output
          console.log(`has_issues=${hasIssues}`);
          fs.writeFileSync(process.env.GITHUB_OUTPUT || 'GITHUB_OUTPUT', `has_issues=${hasIssues}\n`, { flag: 'a' });
