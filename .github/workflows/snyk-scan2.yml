name: Snyk (Extra task)

on:
  pull_request:
    branches: ["main", "master"]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write   # needed to comment on PRs
  issues: write          # optional, but you had it; fine to keep

jobs:
  snyk-scan:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "$SNYK_TOKEN"

      - name: Run Snyk Open Source test (JSON report)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        # allow the scan step to succeed even if vulns are found; we'll decide pass/fail
        run: snyk test --json-file-output=snyk-os.json || true

      - name: Ensure report exists
        run: '[ -f snyk-os.json ] || echo "{}" > snyk-os.json'

      # -------- New: parse report & build PR comment ----------
      - name: Parse report & build PR comment
        id: parse
        run: |
          node - <<'NODE'
          const fs = require('fs');

          const path = 'snyk-os.json';
          let raw = '{}';
          try { raw = fs.readFileSync(path, 'utf8'); } catch (e) {}

          let parsed;
          try { parsed = JSON.parse(raw); } catch (e) { parsed = {}; }

          // Snyk JSON might be a single object or an array (multi-project)
          const items = Array.isArray(parsed) ? parsed : [parsed];

          // Collect vulnerabilities from all items
          const allVulns = [];
          for (const it of items) {
            const list = (it && Array.isArray(it.vulnerabilities)) ? it.vulnerabilities : [];
            allVulns.push(...list);
          }

          const wanted = new Set(['critical','high','medium']);
          const vulns = allVulns.filter(v => wanted.has(String(v.severityWithCritical || v.severity || '').toLowerCase()));

          const hasIssues = vulns.length > 0;

          const mdRow = (v) => {
            const sev = String(v.severityWithCritical || v.severity || '').toUpperCase();
            const pkg = v.packageName || v.moduleName || v.name || 'unknown';
            const ver = v.version ? `@${v.version}` : '';
            const id  = v.id || '';
            const title = v.title || '';
            const cves = v?.identifiers?.CVE?.length ? v.identifiers.CVE.join(', ') : '—';
            const fix = Array.isArray(v.fixedIn) && v.fixedIn.length ? v.fixedIn.join(', ') : 'no fix listed';
            let ref = '';
            if (Array.isArray(v.references) && v.references[0]?.url) {
              ref = ` [[ref]](${v.references[0].url})`;
            }
            return `- **${sev}** \`${pkg}${ver}\` — ${title} (${id})  \n  CVE(s): ${cves} • Fix: ${fix}${ref}`;
          };

          const header = hasIssues
            ? `### ❌ Snyk found ${vulns.length} medium/high/critical vulnerabilities`
            : `### ✅ Snyk: no medium/high/critical vulnerabilities found`;

          // If multiple project blocks, show their names on top
          const projectsLine = items
            .map(it => it?.projectName)
            .filter(Boolean)
            .filter((v, i, a) => a.indexOf(v) === i) // unique
            .join(', ') || '—';

          const body = [
            header,
            '',
            `**Project(s)**: ${projectsLine}`,
            hasIssues ? '\n**Details:**\n' : '',
            hasIssues ? vulns.map(mdRow).join('\n') : '',
            '',
            '> Generated by Snyk PR Gate'
          ].join('\n');

          fs.writeFileSync('comment.md', body);

          // Expose output
          console.log(`has_issues=${hasIssues}`);
          fs.writeFileSync(process.env.GITHUB_OUTPUT || 'GITHUB_OUTPUT', `has_issues=${hasIssues}\n`, { flag: 'a' });
          NODE

      # -------- New: post the PR comment ----------
      - name: Post PR comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('comment.md','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

      # -------- New: fail job if issues present ----------
      - name: Fail if issues present
        if: steps.parse.outputs.has_issues == 'true'
        run: |
          echo "High/Medium/Critical vulnerabilities were found. Failing the job."
          exit 1

       
       
