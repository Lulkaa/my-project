name: Snyk (Extra task)

on:
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "$SNYK_TOKEN"

      - name: Run Snyk Open Source test (JSON report)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --json-file-output=snyk-os.json || true

      - name: Ensure report exists
        run: '[ -f snyk-os.json ] || echo "{}" > snyk-os.json'

      # ‚úÖ –õ–ò–®–ï –ü–ï–†–®–ê –∑–Ω–∞–π–¥–µ–Ω–∞ critical/high/medium ‚Üí –æ–¥–∏–Ω –∫–æ–º–µ–Ω—Ç–∞—Ä —É PR
      - name: Comment PR on first Critical/High/Medium issue and fail
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const core = require('@actions/core');

            const path = 'snyk-os.json';
            if (!fs.existsSync(path)) {
              core.info('No snyk-os.json found. Skipping.');
              return;
            }

            const raw = fs.readFileSync(path, 'utf8') || '{}';

            // Helpers
            const toArray = (x) => Array.isArray(x) ? x : (x ? [x] : []);
            const sevWanted = new Set(['critical','high','medium']);

            let parsed;
            try { parsed = JSON.parse(raw); } catch { parsed = null; }

            // –ó–Ω–∞–π–¥–µ–º–æ –ø–µ—Ä—à—É –≤—Ä–∞–∑–ª–∏–≤—ñ—Å—Ç—å –ø–æ –ü–û–†–Ø–î–ö–£ —É –∑–≤—ñ—Ç—ñ
            let first = null;

            const considerList = (list) => {
              if (!Array.isArray(list)) return;
              for (const v of list) {
                const sev = String(v?.severity || '').toLowerCase();
                if (sevWanted.has(sev)) { first = v; return true; }
              }
              return false;
            };

            if (parsed) {
              if (Array.isArray(parsed)) {
                // multi-target —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ —á–µ—Ä–∑—ñ
                for (const item of parsed) {
                  if (considerList(item?.vulnerabilities)) break;
                }
              } else {
                considerList(parsed?.vulnerabilities);
              }
            }

            // Fallback: —è–∫—â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —à—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è —É —Å–∏—Ä–æ–º—É JSON
            if (!first) {
              const m = raw.match(/\b(critical|high|medium)\b/i);
              if (m) {
                first = {
                  severity: m[0].toLowerCase(),
                  title: 'A vulnerability with this severity was detected (raw scan)',
                };
              }
            }

            if (!first) {
              core.info('‚úÖ No critical/high/medium severities found in Snyk report.');
              return;
            }

            // –§–æ—Ä–º—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ –ü–ï–†–®–£ –∑–Ω–∞–π–¥–µ–Ω—É
            const pkg = first.packageName || first.pkgName || '';
            const version = first.version || '';
            const title = first.title || first.id || 'Unknown issue';
            const sev = String(first.severity || '').toUpperCase();
            const cves = toArray(first.identifiers?.CVE).slice(0,5).join(', ');
            const cvss = (typeof first.cvssScore === 'number') ? first.cvssScore : '';
            const pathChain = toArray(first.from).join(' ‚Üí ').slice(0,500);
            const url = first.url || first.snykUrl || '';

            const lines = [
              `üö® **Snyk: first detected ${sev} vulnerability**`,
              '',
              `**Title:** ${title}`,
              pkg ? `**Package:** \`${pkg}\`` : null,
              version ? `**Version:** \`${version}\`` : null,
              `**Severity:** ${sev}`,
              cves ? `**CVE:** ${cves}` : null,
              cvss !== '' ? `**CVSS:** ${cvss}` : null,
              pathChain ? `**Path:** ${pathChain}` : null,
              url ? `**More:** ${url}` : null,
              '',
              '_This job is marked as **failed** to block merge until addressed._'
            ].filter(Boolean);

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: lines.join('\n')
              });
            } else {
              core.warning('No PR context, skipping comment.');
            }

            core.setFailed('Snyk found a Critical/High/Medium vulnerability (first occurrence only).')

     
       
       
