name: Snyk (Extra task)

on:
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "$SNYK_TOKEN"

      - name: Run Snyk Open Source test (JSON report)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --json-file-output=snyk-os.json || true

      - name: Ensure report exists
        run: '[ -f snyk-os.json ] || echo "{}" > snyk-os.json'


       # ---- Bash: парсимо репорт і коментуємо PR, якщо знайдено вразливості ----
      - name: Comment PR with Snyk vulnerabilities (bash)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          API_URL: ${{ github.api_url }}
        run: |
          set -euo pipefail

          # Bash-функція: формує контент коментаря за snyk-os.json
          build_comment_body() {
            local json="snyk-os.json"

            # якщо у файлі немає масиву vulnerabilities — повертаємо порожньо
            if ! jq -e '.vulnerabilities' "$json" >/dev/null 2>&1; then
              return 0
            fi

            # Формуємо рядки для критичних/високих/середніх
            jq -r '
              .vulnerabilities[]
              | select(.severity=="critical" or .severity=="high" or .severity=="medium")
              | {
                  title: (.title // "Unknown issue"),
                  severity: ((.severity // "unknown") | ascii_upcase | sub("^."; (.[0:1] | ascii_upcase)) | sub("^UNKNOWN"; "Unknown")),  # капіталізація
                  url: (.url // ("https://security.snyk.io/vuln/" + (.id // ""))),
                  pkg: (.packageName // .name // "unknown"),
                  ver: (.version // ( .from[0] // "" | capture(".*@(?<v>[^@]+)$").v? ) // "unknown"),
                  intro: ((.from | first) // ((.packageName // .name // "unknown") + "@" + (.version // "unknown")))
                }
              | "✗ \(.title) [\(.severity) Severity][\(.url)] in \(.pkg)@\(.ver)\n    introduced by \(.intro)"
            ' "$json"
          }

          # Збираємо рядки у змінну
          VULNS_LINES="$(build_comment_body || true)"

          # Якщо нічого не знайшли — нічого не коментуємо
          if [ -z "$VULNS_LINES" ]; then
            echo "No critical/high/medium vulnerabilities found. Skipping PR comment."
            exit 0
          fi

          # Заголовок + список знайдених
          BODY=$'We detected vulnerability in snyk scanning :\n'"$VULNS_LINES"

          # Витягаємо номер PR з payload
          PR_NUMBER="$(jq -r '.pull_request.number' "$GITHUB_EVENT_PATH")"

          # POST коментар у PR через GitHub REST API
          COMMENTS_URL="${API_URL}/repos/${REPO}/issues/${PR_NUMBER}/comments"

          # Екрануємо перенос рядків у JSON
          BODY_JSON=$(jq -Rn --arg b "$BODY" '{body: $b}')

          curl -sS -X POST \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            --data "${BODY_JSON}" \
            "${COMMENTS_URL}" >/dev/null

          echo "Comment posted to PR #${PR_NUMBER}."
     
       
       
