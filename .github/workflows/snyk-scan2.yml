name: Snyk (Extra task)

on:
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "$SNYK_TOKEN"
        

      - name: Run Snyk Open Source test (JSON report)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --json-file-output=snyk-os.json || true

      - name: Ensure report exists
        run: '[ -f snyk-os.json ] || echo "{}" > snyk-os.json'

      - name: Comment PR with Snyk vulnerabilities (bash)
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          API_URL: ${{ github.api_url }}
        run: |
          set -euo pipefail
          json="snyk-os.json"

          [ -s "$json" ] || { echo "snyk-os.json missing/empty"; exit 0; }

          build_comment_body() {
            jq -r '
              (.vulnerabilities // [])
              | map(select(
                  ( .severity // .severityWithCritical // "unknown" | ascii_downcase )
                  | IN("critical","high","medium")
                ))
              | if length == 0 then empty else
                  ( "We detected vulnerability in snyk scanning :" ),
                  ( .[] |
                    {
                      title: (.title // "Unknown issue"),
                      sev: ((.severity // .severityWithCritical // "unknown") | ascii_downcase),
                      url: (.url // ("https://security.snyk.io/vuln/" + (.id // ""))),
                      pkg: (.packageName // .moduleName // .name // "unknown"),
                      ver: (.version // "unknown"),
                      intro: ((.from | select(type=="array") | last) // ((.packageName // .moduleName // .name // "unknown") + "@" + (.version // "unknown")))
                    }
                    | "✗ \(.title) [\((.sev | .[0:1] | ascii_upcase) + (.sev | .[1:]) ) Severity][\(.url)] in \(.pkg)@\(.ver)\n    introduced by \(.intro)"
                  )
                end
            ' "$json"
          }

          # Збираємо текст коментаря
          MAPFILE -t lines < <(build_comment_body || true)

          if [ "${#lines[@]}" -eq 0 ]; then
            echo "No critical/high/medium vulnerabilities found in .vulnerabilities[]."
            exit 0
          fi

          BODY="$(printf "%s\n" "${lines[@]}")"

          PR_NUMBER="$(jq -r '.pull_request.number' "$GITHUB_EVENT_PATH")"
          COMMENTS_URL="${API_URL}/repos/${REPO}/issues/${PR_NUMBER}/comments"
          BODY_JSON=$(jq -Rn --arg b "$BODY" '{body: $b}')

          curl -sS -X POST \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            --data "${BODY_JSON}" \
            "${COMMENTS_URL}" >/dev/null

          echo "Comment posted to PR #${PR_NUMBER}. Failing workflow as requested."
          exit 1


     
       
       
