name: Snyk (Extra task)

on:
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  snyk-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'


      - name: Install dependencies
        run: npm ci

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "$SNYK_TOKEN"

      - name: Run Snyk Open Source test (JSON report)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --json-file-output=snyk-os.json || true

      - name: Ensure report exists
        run: '[ -f snyk-os.json ] || echo "{}" > snyk-os.json'

      - name: Comment PR with Snyk vulnerabilities (github-script)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const core = require('@actions/core');

            const path = 'snyk-os.json';

            // 1) Якщо файл відсутній або порожній — виходимо без помилки
            if (!fs.existsSync(path) || fs.statSync(path).size === 0) {
              core.info('snyk-os.json missing/empty');
              return;
            }

            // 2) Читаємо JSON Snyk
            const data = JSON.parse(fs.readFileSync(path, 'utf8'));
            const all = Array.isArray(data.vulnerabilities) ? data.vulnerabilities : [];

            // 3) Фільтруємо critical/high/medium (беремо .severity або .severityWithCritical)
            const sevOf = v => String((v.severity ?? v.severityWithCritical ?? 'unknown')).toLowerCase();
            const interesting = all.filter(v => ['critical', 'high', 'medium'].includes(sevOf(v)));

            if (interesting.length === 0) {
              core.info('No critical/high/medium vulnerabilities found in .vulnerabilities[].');
              return;
            }

            // 4) Формуємо тіло коментаря (еквівалент до jq-логіки)
            const lines = ['We detected vulnerability in snyk scanning :'];
            for (const v of interesting) {
              const title = v.title ?? 'Unknown issue';
              const sev = sevOf(v);
              const sevCap = sev.charAt(0).toUpperCase() + sev.slice(1);
              const url = v.url ?? (v.id ? `https://security.snyk.io/vuln/${v.id}` : 'https://security.snyk.io');
              const pkg = v.packageName ?? v.moduleName ?? v.name ?? 'unknown';
              const ver = v.version ?? 'unknown';
              const fromArr = Array.isArray(v.from) ? v.from : null;
              const intro = fromArr && fromArr.length ? fromArr[fromArr.length - 1] : `${pkg}@${ver}`;
              lines.push(`✗ ${title} [${sevCap} Severity][${url}] in ${pkg}@${ver}\n    introduced by ${intro}`);
            }
            const body = lines.join('\n');

            // 5) Знаходимо номер PR і публікуємо коментар
            const prNumber = context.payload?.pull_request?.number;
            if (!prNumber) {
              core.info('No pull_request context found. Skipping comment.');
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });

            core.info(`Comment posted to PR #${prNumber}. Failing workflow as requested.`);

            // 6) Навмисно фейлимо крок/джобу
            core.setFailed('Snyk vulnerabilities found.');



     
       
       
